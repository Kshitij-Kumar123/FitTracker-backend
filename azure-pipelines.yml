trigger:
- main

# Stage-1: Terraform Validate Stage
#   Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
#   Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Agents)
#   Step-3: Validate Terraform Manifests

# Stage-2: Deploy Stages for Prod, Dev in future
#   Deployment-1: Deploy Dev AKS Cluster
#   Step-1: Define Variables for environments
#   Step-2: Terraform Initialize (State Storage to store in Azure Storage Account for Prod AKS Cluster)
#   Step-3: Terraform Plan (Create Plan)
#   Step-4: Terraform Apply (Use the plan created in previous step)

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENV
  value: dev
- name: PROD_ENV
  value: prod

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'azure-winter-project-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage'
          backendAzureRmStorageAccountName: 'terraformstorageholder'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'base.tfstate'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
      
- stage: AKSProdCluster
  jobs:
  - deployment: DeployProdAKSCluster
    displayName: Deploy AKS Cluster for Prod
    pool: 
      vmImage: 'ubuntu-latest'
    environment: $(PROD_ENV)
    strategy:
     runOnce:
       deploy:
        steps:
        - task: TerraformTaskV4@4
          displayName: Terraform Init for Prod
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
            backendServiceArm: 'azure-winter-project-svc-con'
            backendAzureRmResourceGroupName: 'terraform-storage'
            backendAzureRmStorageAccountName: 'terraformstorageholder'
            backendAzureRmContainerName: 'tfstatefiles'
            backendAzureRmKey: 'aks-$(PROD_ENV).tfstate'
        - task: TerraformTaskV4@4
          displayName: Terraform Plan for Prod
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-out'
            commandOptions: '-var environment=$(PROD_ENV) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
            environmentServiceNameAzureRM: 'azure-winter-project-svc-con'
        - task: TerraformTaskV4@4
          displayName: Terraform apply changes to Prod
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-out'
            commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
            environmentServiceNameAzureRM: 'azure-winter-project-svc-con'

